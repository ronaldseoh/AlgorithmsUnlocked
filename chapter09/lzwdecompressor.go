// Package chapter09 contains
// implementations of the algorithms introduced in Chapter 9.
package chapter09

// LzwDecompressor takes a sequence of indices generated by LzwCompressor
// and convert it back into the original text.
func LzwDecompressor(indices []int) string {

	decompressed := ""

	// Each element containing actual strings
	dictionary := make([]string, 256)

	// From dictionary[0] to dictionary[255] will contain
	// all the individual ASCII characters.
	for i := 0; i < 256; i++ {
		dictionary[i] = string(rune(i))
	}

	current := indices[0]
	indices = indices[1:]

	decompressed += dictionary[current]

	for len(indices) > 0 {
		previous := current

		current = indices[0]
		indices = indices[1:]

		if current < len(dictionary) {
			s := []rune(dictionary[current])

			decompressed += string(s)

			dictionary = append(dictionary, dictionary[previous]+string(s[0]))
		} else {
			previousEntry := []rune(dictionary[previous])

			s := dictionary[previous] + string(previousEntry[0])
			decompressed += s

			dictionary = append(dictionary, s)
		}
	}

	return decompressed
}
